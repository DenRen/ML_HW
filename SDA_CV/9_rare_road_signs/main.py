import rare_traffic_sign_solution as src
from torch.utils.data import DataLoader
import torch
import albumentations as A

def main():
    config = src.ModelParams()

    dataset = src.DatasetRTSD(
        root_folders=["new_train"], # This must be generated by generate_all_data function
        path_to_classes_json="classes.json",
        model_input_shape=config.input_shape,
        load_on_init=False)

    data_module = src.RTSDDataModule(
        dataset,
        batch_size=config.batch_size,
        num_workers=config.num_cpu,
        enable_custom_batch_sampler=True)
    
    MyTransform = A.Compose([
        A.OneOf([
            A.RandomBrightnessContrast(brightness_limit=0.4,
                                       contrast_limit=0.3, p=0.8),
            A.Blur(blur_limit=7, p=0.3),
            A.CLAHE(),
        ], p=0.4),
        A.OneOf([
            A.RGBShift(r_shift_limit=30, g_shift_limit=30, b_shift_limit=30),
            A.ChannelDropout(),
            A.Equalize(p=0.1),
        ]),
        A.OneOf([
            A.ShiftScaleRotate(shift_limit=0.15, scale_limit=0.15, rotate_limit=30,
                            border_mode=1),
            A.Affine(mode=1),
        ]),
        A.GaussNoise(var_limit=(40, 400), p=0.3),
        A.CoarseDropout(min_holes=7, max_holes=50,
                        min_height=7, max_height=50,
                        min_width=3, max_width=7, p=0.2),
        A.Normalize(always_apply=True)
    ])
    data_module._set_train_transform(MyTransform)
        
    model = src.CustomNetwork(pretrained=True, features_criterion=src.FeaturesLoss(2.0))
    # model.load_state_dict(torch.load('simple_model.pth', map_location='cpu'))
    
    children = list(model.model.children())
    for idx, child in enumerate(children):
        print(len(children) - idx, ": ", str(child).split("(")[0])
    
    data_module.batch_size = 32
    model.patience = 5
    src.learn_epochs(model, unfreeze_layers=5, num_epoch=30, lr=3e-4, data_module=data_module)
    
if __name__ == "__main__":
    main()
